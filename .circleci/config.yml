version: 2

references:

  container_config: &container_config
    docker:
      - image: circleci/openjdk:11-jdk
    working_directory: ~/repo
    environment:
      JVM_OPTS: -Xmx3200m

  restore_repo: &restore_repo
    restore_cache:
      keys:
        - v1-repo-{{ .Branch }}-{{ .Revision }}
        - v1-repo-{{ .Branch }}
        - v1-repo

  jars_cache_key: &jars_cache_key
    v1-dependencies-{{ checksum "build.gradle" }}
  jars_backup_cache_key: &jars_backup_cache_key
    v1-dependencies

  restore_jars: &restore_jars
    restore_cache:
      keys:
        - *jars_cache_key
        - *jars_backup_cache_key

jobs:
  checkout_code:
    <<: *container_config
    steps:
      - *restore_repo
      - checkout
      - save_cache:
          key: v1-repo-{{ .Branch }}-{{ .Revision }}
          paths:
            - .

  build:
    <<: *container_config
    steps:
      - *restore_repo
      - *restore_jars
      - run: ./gradlew build -x test
      - save_cache:
          key: *jars_cache_key
          paths:
            - ~/.gradle

  test:
    <<: *container_config
    steps:
      - *restore_repo
      - *restore_jars
      - run: ./gradlew test
      - store_test_results:
          path: build/test-results

  deploy:
    <<: *container_config
    steps:
      - *restore_repo
      - *restore_jars
      - run:
          name: Setup Environment Variables
          command: |
            echo "export TAG_SUFFIX=$(date +%Y%m%d%H%M%S)" >> $BASH_ENV
            echo 'export IMAGE="todarch/wisit-be:${CIRCLE_BRANCH}-${TAG_SUFFIX}"' >> $BASH_ENV
      - run:
          name: Publish Docker image with Jib
          command: |
            ./gradlew jib -x test
      - add_ssh_keys:
          fingerprints:
            - "80:2d:9c:70:d7:07:3f:fc:25:8d:b1:ed:4b:cd:96:73"
      - run:
          name: Deploy app to server via Docker
          command: |
            ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST "/bin/bash ./deploy_app.sh ${IMAGE}"


workflows:
  version: 2

  build_test_deploy:
    jobs:
      - checkout_code
      - build:
          requires:
            - checkout_code
      - test:
          requires:
            - build
      - deploy:
          requires:
            - test
          filters:
            branches:
              only: master
